from fpdf import FPDF
import os
from datetime import datetime
from typing import Dict, List
import numpy as np

class ReportGenerator:
    def __init__(self):
        self.output_dir = "outputs/reports"
        # Create output directory if it doesn't exist
        try:
            os.makedirs(self.output_dir, exist_ok=True)
        except Exception as e:
            print(f"Warning: Could not create output directory: {e}")
            # Use current directory as fallback
            self.output_dir = "."
    
    def generate_comprehensive_report(self, report_data: Dict, annotated_image=None) -> str:
        """Generate comprehensive medical report in PDF format"""
        
        try:
            class MedicalReportPDF(FPDF):
                def header(self):
                    # Add a colored header background
                    self.set_fill_color(41, 119, 180)  # Medical blue
                    self.rect(0, 0, 210, 25, 'F')
                    
                    # Hospital/Clinic logo area (placeholder)
                    self.set_fill_color(255, 255, 255)
                    self.rect(10, 5, 15, 15, 'F')
                    self.set_font('Arial', 'B', 8)
                    self.set_text_color(41, 119, 180)
                    self.text(12, 13, 'AI')
                    self.text(10, 17, 'DIAG')
                    
                    # Main title
                    self.set_font('Arial', 'B', 18)
                    self.set_text_color(255, 255, 255)
                    self.text(30, 15, 'KIDNEY STONE DIAGNOSTIC REPORT')
                    
                    # Subtitle
                    self.set_font('Arial', '', 10)
                    self.text(30, 20, 'RenalAI - Kidney Stone Diagnostic Systemgg')
                    
                    # Reset colors
                    self.set_text_color(0, 0, 0)
                    self.ln(30)
                
                def footer(self):
                    self.set_y(-20)
                    # Footer line
                    self.set_draw_color(41, 119, 180)
                    self.line(10, self.get_y(), 200, self.get_y())
                    
                    self.set_font('Arial', 'I', 8)
                    self.set_text_color(100, 100, 100)
                    self.cell(0, 5, f'Generated by RenalAI - Kidney Stone Diagnostic System - Page {self.page_no()}', 0, 1, 'C')
                    self.cell(0, 5, f'Report Date: {datetime.now().strftime("%B %d, %Y at %H:%M")}', 0, 0, 'C')
                
                def section_header(self, title, color_r=41, color_g=119, color_b=180):
                    """Create a styled section header"""
                    self.ln(8)
                    self.set_fill_color(color_r, color_g, color_b)
                    self.set_text_color(255, 255, 255)
                    self.set_font('Arial', 'B', 12)
                    self.cell(0, 8, f'  {title}', 0, 1, 'L', True)
                    self.set_text_color(0, 0, 0)
                    self.ln(3)
                
                def info_box(self, items, box_color=(245, 245, 245)):
                    """Create an information box with background"""
                    self.set_fill_color(*box_color)
                    y_start = self.get_y()
                    
                    # Calculate box height
                    box_height = len(items) * 6 + 6
                    
                    # Draw background box
                    self.rect(10, y_start, 190, box_height, 'F')
                    
                    # Add border
                    self.set_draw_color(200, 200, 200)
                    self.rect(10, y_start, 190, box_height)
                    
                    # Add content
                    self.set_font('Arial', '', 11)
                    self.ln(3)
                    for item in items:
                        self.cell(10, 6, '', 0, 0)  # Left margin
                        self.cell(0, 6, item, 0, 1)
                    self.ln(3)
                
                def urgent_alert_box(self, message):
                    """Create an urgent alert box"""
                    self.ln(5)
                    self.set_fill_color(220, 53, 69)  # Red background
                    self.set_text_color(255, 255, 255)
                    self.set_font('Arial', 'B', 11)
                    self.cell(0, 10, f'   URGENT: {message}', 0, 1, 'L', True)
                    self.set_text_color(0, 0, 0)
                    self.ln(3)
                
                def success_box(self, message):
                    """Create a success/normal finding box"""
                    self.ln(5)
                    self.set_fill_color(40, 167, 69)  # Green background
                    self.set_text_color(255, 255, 255)
                    self.set_font('Arial', 'B', 11)
                    self.cell(0, 8, f'  {message}', 0, 1, 'L', True)
                    self.set_text_color(0, 0, 0)
                    self.ln(3)
            
            pdf = MedicalReportPDF()
            pdf.add_page()
            
            # Report Overview Box
            pdf.section_header('REPORT OVERVIEW', 25, 135, 84)  # Green header
            
            num_stones = len(report_data.get('detections', []))
            if num_stones > 0:
                if num_stones == 1:
                    overview_msg = f"{num_stones} kidney stone detected - Detailed analysis provided below"
                else:
                    overview_msg = f"{num_stones} kidney stones detected - Comprehensive analysis included"
                pdf.info_box([overview_msg])
                
                # Check for urgent cases
                urgent_count = 0
                if report_data.get('analysis_results'):
                    for analysis in report_data['analysis_results']:
                        urgency = analysis.get('treatment_rec', {}).get('urgency', '')
                        if urgency in ['High', 'Urgent']:
                            urgent_count += 1
                
                if urgent_count > 0:
                    pdf.urgent_alert_box(f"{urgent_count} stone(s) require immediate medical attention")
            else:
                pdf.success_box("No kidney stones detected in the provided image")
            
            # Patient Information Section
            pdf.section_header('PATIENT INFORMATION')
            
            patient_info = report_data['patient_info']
            patient_details = [
                f"Patient Name: {patient_info.get('name', 'N/A')}",
                f"Age: {patient_info.get('age', 'N/A')} years",
                f"Gender: {patient_info.get('gender', 'N/A')}",
                f"Patient ID: {patient_info.get('patient_id', 'Not provided')}",
                f"Examination Date: {patient_info.get('examination_date', 'N/A')}",
                f"Report Generated: {datetime.now().strftime('%B %d, %Y at %H:%M')}"
            ]
            pdf.info_box(patient_details)
            
            # Executive Summary
            pdf.section_header('EXECUTIVE SUMMARY')
            
            summary_items = [f"Total Stones Detected: {num_stones}"]
            
            if num_stones > 0 and report_data.get('analysis_results'):
                try:
                    largest_stone = max(report_data['analysis_results'], 
                                       key=lambda x: x['size_info']['equivalent_diameter_mm'])
                    summary_items.extend([
                        f"Largest Stone: {largest_stone['size_info']['equivalent_diameter_mm']:.1f} mm diameter",
                        f"Highest Priority: {largest_stone['treatment_rec']['urgency']} treatment urgency",
                        f"Primary Recommendation: {largest_stone['treatment_rec']['treatment']}"
                    ])
                    
                    # Calculate average size if multiple stones
                    if len(report_data['analysis_results']) > 1:
                        avg_size = sum(a['size_info']['equivalent_diameter_mm'] for a in report_data['analysis_results']) / len(report_data['analysis_results'])
                        summary_items.append(f"Average Stone Size: {avg_size:.1f} mm")
                        
                except Exception as e:
                    summary_items.append("Error processing stone analysis data")
            else:
                summary_items.append("No stones detected - Normal findings")
            
            pdf.info_box(summary_items, (235, 248, 255))  # Light blue background
            
            # Detailed Findings
            if num_stones > 0 and report_data.get('analysis_results'):
                pdf.section_header('DETAILED STONE ANALYSIS')
                
                for i, analysis in enumerate(report_data['analysis_results']):
                    try:
                        # Stone header with number and urgency indicator
                        urgency = analysis.get('treatment_rec', {}).get('urgency', 'Unknown')
                        stone_title = f"Stone #{i+1}"
                        if urgency in ['Urgent', 'High']:
                            stone_title += f" - {urgency} Priority "
                        elif urgency == 'Low':
                            stone_title += f" - {urgency} Priority "
                        else:
                            stone_title += f" - {urgency} Priority"
                        
                        pdf.ln(5)
                        pdf.set_font('Arial', 'B', 11)
                        pdf.set_fill_color(250, 250, 250)
                        pdf.cell(0, 7, stone_title, 0, 1, 'L', True)
                        
                        # Stone details in organized format
                        size_info = analysis.get('size_info', {})
                        location_info = analysis.get('location_info', {})
                        treatment_rec = analysis.get('treatment_rec', {})
                        
                        stone_details = [
                            "MEASUREMENTS:",
                            f"  - Equivalent Diameter: {size_info.get('equivalent_diameter_mm', 0):.1f} mm",
                            f"  - Dimensions: {size_info.get('width_mm', 0):.1f} × {size_info.get('height_mm', 0):.1f} mm",
                            f"  - Surface Area: {size_info.get('area_mm2', 0):.1f} mm²",
                            "",
                            "LOCATION & CHARACTERISTICS:",
                            f"  - Anatomical Position: {location_info.get('side', 'Unknown')} {location_info.get('anatomical_region', 'Unknown')}",
                            f"  - Stone Classification: {treatment_rec.get('category', 'Unknown')}",
                            f"  - Natural Passage Likelihood: {treatment_rec.get('pass_probability', 'Unknown')}",
                            "",
                            "CLINICAL ASSESSMENT:",
                            f"  - Recommended Treatment: {treatment_rec.get('treatment', 'Unknown')}",
                            f"  - Treatment Priority: {treatment_rec.get('urgency', 'Unknown')}",
                        ]
                        
                        # Color code the info box based on urgency
                        if urgency in ['Urgent', 'High']:
                            box_color = (255, 235, 235)  # Light red
                        elif urgency == 'Low':
                            box_color = (235, 255, 235)  # Light green
                        else:
                            box_color = (245, 245, 245)  # Light gray
                        
                        pdf.info_box(stone_details, box_color)
                        
                    except Exception as e:
                        pdf.set_font('Arial', '', 10)
                        pdf.cell(0, 6, f"Error processing stone #{i+1} data: {str(e)}", 0, 1)
                        pdf.ln(3)
            
            # Add annotated image if provided
            if annotated_image is not None:
                try:
                    pdf.section_header('DIAGNOSTIC IMAGING RESULTS')
                    
                    # Add descriptive text
                    pdf.set_font('Arial', '', 10)
                    pdf.cell(0, 6, "The following image shows the AI analysis results with detected kidney stones", 0, 1)
                    pdf.cell(0, 6, "highlighted using bounding boxes. Each detection represents a potential stone location", 0, 1)
                    pdf.ln(5)
                    
                    # Save annotated image temporarily
                    import tempfile
                    from PIL import Image
                    import numpy as np
                    
                    # Convert numpy array to PIL Image if necessary
                    if isinstance(annotated_image, np.ndarray):
                        if annotated_image.dtype != np.uint8:
                            annotated_image = annotated_image.astype(np.uint8)
                        
                        # Convert BGR to RGB if needed (OpenCV uses BGR)
                        if len(annotated_image.shape) == 3 and annotated_image.shape[2] == 3:
                            annotated_image = annotated_image[:, :, ::-1]  # BGR to RGB
                        
                        pil_image = Image.fromarray(annotated_image)
                    elif isinstance(annotated_image, Image.Image):
                        pil_image = annotated_image
                    else:
                        raise ValueError("Unsupported image format")
                    
                    # Create temporary file
                    with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                        temp_path = temp_file.name
                        pil_image.save(temp_path, 'JPEG', quality=95)
                    
                    # Calculate image dimensions for PDF (maintain aspect ratio)
                    img_width, img_height = pil_image.size
                    max_width = 170  # Max width in PDF units
                    max_height = 100  # Max height in PDF units
                    
                    # Calculate scaling factor
                    width_ratio = max_width / img_width
                    height_ratio = max_height / img_height
                    scale_factor = min(width_ratio, height_ratio)
                    
                    # Calculate final dimensions
                    final_width = img_width * scale_factor
                    final_height = img_height * scale_factor
                    
                    # Center the image horizontally
                    x_offset = (210 - final_width) / 2  # 210 is A4 width in mm
                    
                    # Add decorative border around image
                    pdf.set_draw_color(41, 119, 180)
                    pdf.set_line_width(0.5)
                    pdf.rect(x_offset-2, pdf.get_y()-2, final_width+4, final_height+4)
                    
                    # Add image to PDF
                    pdf.image(temp_path, x=x_offset, y=None, w=final_width, h=final_height)
                    pdf.ln(8)
                    
                    # Clean up temporary file
                    import os
                    try:
                        os.unlink(temp_path)
                    except:
                        pass  # Ignore cleanup errors
                        
                    # Image caption with styling
                    pdf.set_font('Arial', 'I', 9)
                    pdf.set_text_color(80, 80, 80)
                    pdf.cell(0, 5, "Figure 1: AI-Enhanced Medical Image showing detected kidney stones with confidence indicators", 0, 1, 'C')
                    pdf.set_text_color(0, 0, 0)
                    pdf.ln(8)
                    
                except Exception as e:
                    pdf.set_font('Arial', '', 10)
                    pdf.cell(0, 6, f"Note: Diagnostic image could not be included in this report", 0, 1)
                    pdf.cell(0, 6, f"Technical details: {str(e)[:100]}", 0, 1)
                    pdf.ln(5)
            
            # Clinical Recommendations
            pdf.section_header('CLINICAL RECOMMENDATIONS', 220, 53, 69)  # Red header for importance
            
            try:
                recommendations = self._generate_clinical_recommendations(report_data)
                
                # Categorize recommendations
                urgent_recs = []
                routine_recs = []
                
                for rec in recommendations:
                    if any(word in rec.upper() for word in ['URGENT', 'IMMEDIATE', 'EMERGENCY']):
                        urgent_recs.append(rec)
                    else:
                        routine_recs.append(rec)
                
                # Display urgent recommendations first
                if urgent_recs:
                    pdf.set_font('Arial', 'B', 11)
                    pdf.set_fill_color(255, 243, 205)  # Light orange background
                    pdf.cell(0, 7, ' IMMEDIATE ACTION REQUIRED:', 0, 1, 'L', True)
                    pdf.ln(2)
                    
                    for rec in urgent_recs:
                        pdf.set_font('Arial', '', 10)
                        if len(rec) > 85:
                            # Handle text wrapping
                            words = rec.split(' ')
                            line = ""
                            for word in words:
                                if len(line + word) < 85:
                                    line += word + " "
                                else:
                                    pdf.cell(10, 6, '', 0, 0)  # Indent
                                    pdf.cell(0, 6, f" {line.strip()}", 0, 1)
                                    line = word + " "
                            if line.strip():
                                pdf.cell(10, 6, '', 0, 0)  # Indent
                                pdf.cell(0, 6, f" {line.strip()}", 0, 1)
                        else:
                            pdf.cell(10, 6, '', 0, 0)  # Indent
                            pdf.cell(0, 6, f" {rec}", 0, 1)
                    pdf.ln(5)
                
                # Display routine recommendations
                if routine_recs:
                    pdf.set_font('Arial', 'B', 11)
                    pdf.set_fill_color(232, 245, 233)  # Light green background
                    pdf.cell(0, 7, ' GENERAL CARE RECOMMENDATIONS:', 0, 1, 'L', True)
                    pdf.ln(2)
                    
                    for rec in routine_recs:
                        pdf.set_font('Arial', '', 10)
                        if len(rec) > 85:
                            # Handle text wrapping
                            words = rec.split(' ')
                            line = ""
                            for word in words:
                                if len(line + word) < 85:
                                    line += word + " "
                                else:
                                    pdf.cell(10, 6, '', 0, 0)  # Indent
                                    pdf.cell(0, 6, f" {line.strip()}", 0, 1)
                                    line = word + " "
                            if line.strip():
                                pdf.cell(10, 6, '', 0, 0)  # Indent
                                pdf.cell(0, 6, f" {line.strip()}", 0, 1)
                        else:
                            pdf.cell(10, 6, '', 0, 0)  # Indent
                            pdf.cell(0, 6, f" {rec}", 0, 1)
                    
            except Exception as e:
                pdf.set_font('Arial', '', 10)
                pdf.cell(0, 6, "Error generating clinical recommendations. Please consult your physician.", 0, 1)
            
            pdf.ln(8)
            
            # Technical Information & Disclaimers
            pdf.section_header('TECHNICAL DETAILS & DISCLAIMERS', 108, 117, 125)  # Purple header
            
            tech_info = [
                "ANALYSIS METHODOLOGY:",
                "  - Deep Learning Model: YOLOv8 (You Only Look Once) architecture",
                "  - Training Data: Specialized kidney stone medical imaging dataset",
                "  - Image Processing: Advanced computer vision algorithms",
                "  - Measurement Calibration: Medical imaging standards compliant",
                "",
                "IMPORTANT DISCLAIMERS:",
                "  - This AI analysis is a diagnostic aid, not a replacement for professional medical judgment",
                "  - All findings should be correlated with clinical symptoms and patient history",
                "  - Additional imaging studies may be required for comprehensive evaluation",
                "  - Treatment decisions should always involve qualified medical professionals",
                "  - False positives and false negatives are possible with any diagnostic tool",
                "",
                "QUALITY ASSURANCE:",
                f"  - Report Generated: {datetime.now().strftime('%B %d, %Y at %H:%M:%S')}",
                "  - Software Version: AI Kidney Stone Diagnostic System v2.0",
                "  - Image Quality: Verified for analysis compatibility"
            ]
            
            pdf.info_box(tech_info, (248, 249, 250))  # Very light gray
            
            # Save the PDF
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            patient_name = report_data['patient_info'].get('name', 'patient').replace(' ', '_')
            filename = f"kidney_stone_report_{patient_name}_{timestamp}.pdf"
            filepath = os.path.join(self.output_dir, filename)
            
            pdf.output(filepath)
            
            # Verify file was created successfully
            if os.path.exists(filepath) and os.path.getsize(filepath) > 0:
                return filepath
            else:
                raise Exception("PDF file was not created successfully")
                
        except Exception as e:
            print(f"Error generating PDF report: {e}")
            raise Exception(f"Failed to generate PDF report: {str(e)}")
    
    def _generate_clinical_recommendations(self, report_data: Dict) -> List[str]:
        """Generate clinical recommendations based on findings"""
        recommendations = []
        
        try:
            num_stones = len(report_data.get('detections', []))
            if num_stones == 0:
                recommendations.append("No kidney stones detected. Continue routine follow-up.")
                return recommendations
            
            # Analyze all stones for recommendations
            large_stones = 0
            urgent_stones = 0
            
            for analysis in report_data.get('analysis_results', []):
                try:
                    size_mm = analysis.get('size_info', {}).get('equivalent_diameter_mm', 0)
                    urgency = analysis.get('treatment_rec', {}).get('urgency', 'Unknown')
                    
                    if size_mm > 6:
                        large_stones += 1
                    if urgency in ['High', 'Urgent']:
                        urgent_stones += 1
                except:
                    continue
            
            # General recommendations
            recommendations.append("Increase fluid intake to 2-3 liters per day unless contraindicated")
            
            if urgent_stones > 0:
                recommendations.append("URGENT: Immediate urological consultation recommended")
                recommendations.append("Consider pain management if patient is symptomatic")
            elif large_stones > 0:
                recommendations.append("Urological consultation recommended within 1-2 weeks")
                recommendations.append("Consider medical expulsive therapy if appropriate")
            else:
                recommendations.append("Conservative management with watchful waiting")
                recommendations.append("Follow-up imaging in 3-6 months")
            
            recommendations.append("Dietary counseling for stone prevention")
            recommendations.append("Metabolic evaluation if recurrent stones")
            
        except Exception as e:
            recommendations.append("Error generating specific recommendations. Please consult with physician.")
            
        return recommendations

    def generate_summary_statistics(self, detections: List, size_calculator) -> Dict:
        """Generate summary statistics for the detected stones"""
        try:
            if not detections:
                return {}
            
            sizes = []
            for det in detections:
                try:
                    size_info = size_calculator.calculate_stone_size(det)
                    sizes.append(size_info['equivalent_diameter_mm'])
                except:
                    continue
            
            if not sizes:
                return {}
            
            stats = {
                'total_stones': len(detections),
                'average_size': np.mean(sizes),
                'largest_size': np.max(sizes),
                'smallest_size': np.min(sizes),
                'size_std': np.std(sizes) if len(sizes) > 1 else 0
            }
            
            return stats
            
        except Exception as e:
            print(f"Error generating summary statistics: {e}")
            return {}